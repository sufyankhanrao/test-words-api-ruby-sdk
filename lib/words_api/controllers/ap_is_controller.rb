# words_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module WordsApi
  # APIsController
  class APIsController < BaseController
    # Get synonyms of a word.
    # @param [String] word Required parameter: The word to search synonyms
    # for.
    # @return [SynonymsResponse] response from the API call.
    def synonyms(word)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/words/{word}/synonyms',
                                     Server::DEFAULT)
                   .template_param(new_parameter(word, key: 'word')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('RapidAPI-Key')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(SynonymsResponse.method(:from_hash)))
        .execute
    end

    # Get definitions of a word, including the part of speech.
    # @param [String] word Required parameter: The word to search the
    # definitions for.
    # @return [DefinitionsResponse] response from the API call.
    def definitions(word)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/words/{word}/definitions',
                                     Server::DEFAULT)
                   .template_param(new_parameter(word, key: 'word')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('RapidAPI-Key')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(DefinitionsResponse.method(:from_hash)))
        .execute
    end

    # How to pronounce a word, according to the International Phonetic Alphabet.
    # May include multiple results if the word is pronounced differently
    # depending on its part of speech.
    # @param [String] word Required parameter: The word to search pronunciation
    # for.
    # @return [PronunciationResponse] response from the API call.
    def pronunciation(word)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/words/{word}/pronunciation',
                                     Server::DEFAULT)
                   .template_param(new_parameter(word, key: 'word')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('RapidAPI-Key')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(PronunciationResponse.method(:from_hash)))
        .execute
    end

    # Retrieve information about a word. Results can include definitions, part
    # of speech, synonyms, related words, syllables, and pronunciation. This
    # method is useful to see which relationships are attached to which
    # definition and part of speech of a word.
    # @param [String] word Required parameter: This is a template parameter that
    # is used to provide the word, about which the information is being
    # fetched.
    # @return [WordResponse] response from the API call.
    def word(word)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/words/{word}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(word, key: 'word')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('RapidAPI-Key')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(WordResponse.method(:from_hash)))
        .execute
    end

    # Get examples of how the word is used.
    # @param [String] word Required parameter: The word to search the examples
    # for.
    # @return [ExamplesResponse] response from the API call.
    def examples(word)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/words/{word}/examples',
                                     Server::DEFAULT)
                   .template_param(new_parameter(word, key: 'word')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('RapidAPI-Key')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ExamplesResponse.method(:from_hash)))
        .execute
    end

    # Expands upon the frequency score returned by the main /words/{word}
    # endpoint. Returns zipf, a score indicating how common the word is in the
    # English language, with a range of 1 to 7; per Million, the number of times
    # the word is likely to appear in a corpus of one million English words; and
    # diversity, a 0-1 scale the shows the likelihood of the word appearing in
    # an English document that is part of a corpus.
    # @param [String] word Required parameter: The word to search frequency
    # for.
    # @return [FrequencyResponse] response from the API call.
    def frequency(word)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/words/{word}/frequency',
                                     Server::DEFAULT)
                   .template_param(new_parameter(word, key: 'word')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('RapidAPI-Key')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(FrequencyResponse.method(:from_hash)))
        .execute
    end
  end
end
