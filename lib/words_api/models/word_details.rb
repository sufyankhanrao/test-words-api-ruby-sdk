# words_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module WordsApi
  # This custom type stores word information.
  class WordDetails < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Explains the definition of the word.
    # @return [String]
    attr_accessor :definition

    # Explains what part of speech the word is.
    # @return [String]
    attr_accessor :part_of_speech

    # The list of synonyms.
    # @return [Array[String]]
    attr_accessor :synonyms

    # List of words that are more general than the searched word.
    # @return [Array[String]]
    attr_accessor :type_of

    # More specific examples of types of searched word.
    # @return [Array[String]]
    attr_accessor :has_types

    # The derivation if any.
    # @return [Array[String]]
    attr_accessor :derivation

    # The usage examples of word if any.
    # @return [Array[String]]
    attr_accessor :examples

    # List of antonyms for the searched word.
    # @return [Array[String]]
    attr_accessor :antonyms

    # The verb group of the searched word.
    # @return [Array[String]]
    attr_accessor :verb_group

    # Words that are parts of the searched word.
    # @return [Array[String]]
    attr_accessor :has_parts

    # Words that are substances of the searched word.
    # @return [Array[String]]
    attr_accessor :has_substances

    # Words that are implied by the searched word. Usually used for verbs.
    # @return [Array[String]]
    attr_accessor :entails

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['definition'] = 'definition'
      @_hash['part_of_speech'] = 'partOfSpeech'
      @_hash['synonyms'] = 'synonyms'
      @_hash['type_of'] = 'typeOf'
      @_hash['has_types'] = 'hasTypes'
      @_hash['derivation'] = 'derivation'
      @_hash['examples'] = 'examples'
      @_hash['antonyms'] = 'antonyms'
      @_hash['verb_group'] = 'verbGroup'
      @_hash['has_parts'] = 'hasParts'
      @_hash['has_substances'] = 'hasSubstances'
      @_hash['entails'] = 'entails'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        definition
        part_of_speech
        synonyms
        type_of
        has_types
        derivation
        examples
        antonyms
        verb_group
        has_parts
        has_substances
        entails
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(definition = SKIP, part_of_speech = SKIP, synonyms = SKIP,
                   type_of = SKIP, has_types = SKIP, derivation = SKIP,
                   examples = SKIP, antonyms = SKIP, verb_group = SKIP,
                   has_parts = SKIP, has_substances = SKIP, entails = SKIP)
      @definition = definition unless definition == SKIP
      @part_of_speech = part_of_speech unless part_of_speech == SKIP
      @synonyms = synonyms unless synonyms == SKIP
      @type_of = type_of unless type_of == SKIP
      @has_types = has_types unless has_types == SKIP
      @derivation = derivation unless derivation == SKIP
      @examples = examples unless examples == SKIP
      @antonyms = antonyms unless antonyms == SKIP
      @verb_group = verb_group unless verb_group == SKIP
      @has_parts = has_parts unless has_parts == SKIP
      @has_substances = has_substances unless has_substances == SKIP
      @entails = entails unless entails == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      definition = hash.key?('definition') ? hash['definition'] : SKIP
      part_of_speech = hash.key?('partOfSpeech') ? hash['partOfSpeech'] : SKIP
      synonyms = hash.key?('synonyms') ? hash['synonyms'] : SKIP
      type_of = hash.key?('typeOf') ? hash['typeOf'] : SKIP
      has_types = hash.key?('hasTypes') ? hash['hasTypes'] : SKIP
      derivation = hash.key?('derivation') ? hash['derivation'] : SKIP
      examples = hash.key?('examples') ? hash['examples'] : SKIP
      antonyms = hash.key?('antonyms') ? hash['antonyms'] : SKIP
      verb_group = hash.key?('verbGroup') ? hash['verbGroup'] : SKIP
      has_parts = hash.key?('hasParts') ? hash['hasParts'] : SKIP
      has_substances = hash.key?('hasSubstances') ? hash['hasSubstances'] : SKIP
      entails = hash.key?('entails') ? hash['entails'] : SKIP

      # Create object from extracted values.
      WordDetails.new(definition,
                      part_of_speech,
                      synonyms,
                      type_of,
                      has_types,
                      derivation,
                      examples,
                      antonyms,
                      verb_group,
                      has_parts,
                      has_substances,
                      entails)
    end
  end
end
