# words_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class APIsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.ap_is
    @response_catcher = @controller.http_call_back
  end

  # Get synonyms of a word.
  def test_synonyms
    # Parameters for the API call
    word = 'lovely'

    # Perform the API call through the SDK function
    result = @controller.synonyms(word)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"word":"lovely","synonyms":["adorable","endearing","cover girl","pin-u'\
      'p"]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # Get definitions of a word, including the part of speech.
  def test_definitions
    # Parameters for the API call
    word = 'lovely'

    # Perform the API call through the SDK function
    result = @controller.definitions(word)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"word":"lovely","definition":["lovable especially in a childlike or na'\
      'ive way","a very pretty girl who works as a photographer\'s model","app'\
      'ealing to the emotions as well as the eye"]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # How to pronounce a word, according to the International Phonetic Alphabet. May include multiple results if the word is pronounced differently depending on its part of speech.
  def test_pronunciation
    # Parameters for the API call
    word = 'wind'

    # Perform the API call through the SDK function
    result = @controller.pronunciation(word)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"word":"wind","pronunciation":{"all":"wɪnd","noun":"wɪnd","verb":"waɪn'\
      'd"}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # Retrieve information about a word. Results can include definitions, part of speech, synonyms, related words, syllables, and pronunciation. This method is useful to see which relationships are attached to which definition and part of speech of a word.
  def test_word
    # Parameters for the API call
    word = 'Testing'

    # Perform the API call through the SDK function
    result = @controller.word(word)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get examples of how the word is used.
  def test_examples
    # Parameters for the API call
    word = 'wind'

    # Perform the API call through the SDK function
    result = @controller.examples(word)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"word":"testing","examples":["there are laboratories for commercial te'\
      'sting","it involved testing thousands of children for smallpox","they a'\
      'greed to end the testing of atomic weapons"]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

  # Expands upon the frequency score returned by the main /words/{word} endpoint. Returns zipf, a score indicating how common the word is in the English language, with a range of 1 to 7; per Million, the number of times the word is likely to appear in a corpus of one million English words; and diversity, a 0-1 scale the shows the likelihood of the word appearing in an English document that is part of a corpus.
  def test_frequency
    # Parameters for the API call
    word = 'lovely'

    # Perform the API call through the SDK function
    result = @controller.frequency(word)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"word":"wind","frequency":{"zipf":4.81,"perMillion":64.22,"diversity":'\
      '0.2}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body))
  end

end